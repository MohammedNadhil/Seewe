{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _common = require(\"@react-native-firebase/app/lib/common\");\n\nvar _NativeFirebaseError = _interopRequireDefault(require(\"@react-native-firebase/app/lib/internal/NativeFirebaseError\"));\n\nvar _SharedEventEmitter = _interopRequireDefault(require(\"@react-native-firebase/app/lib/internal/SharedEventEmitter\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _DatabaseDataSnapshot = _interopRequireDefault(require(\"./DatabaseDataSnapshot\"));\n\nvar DatabaseSyncTree = function () {\n  function DatabaseSyncTree() {\n    (0, _classCallCheck2.default)(this, DatabaseSyncTree);\n    this._tree = {};\n    this._reverseLookup = {};\n\n    _SharedEventEmitter.default.addListener('database_sync_event', this._handleSyncEvent.bind(this));\n  }\n\n  (0, _createClass2.default)(DatabaseSyncTree, [{\n    key: \"native\",\n    get: function get() {\n      return _reactNative.NativeModules.RNFBDatabaseQueryModule;\n    }\n  }, {\n    key: \"_handleSyncEvent\",\n    value: function _handleSyncEvent(event) {\n      var body = event.body;\n\n      if (body.error) {\n        this._handleErrorEvent(body);\n      } else {\n        this._handleValueEvent(body);\n      }\n    }\n  }, {\n    key: \"_handleErrorEvent\",\n    value: function _handleErrorEvent(event) {\n      var _event$registration = event.registration,\n          eventRegistrationKey = _event$registration.eventRegistrationKey,\n          registrationCancellationKey = _event$registration.registrationCancellationKey;\n      var registration = this.getRegistration(registrationCancellationKey);\n\n      if (registration) {\n        var error = _NativeFirebaseError.default.fromEvent(event.error, 'database');\n\n        _SharedEventEmitter.default.emit(registrationCancellationKey, error);\n\n        this.removeRegistration(eventRegistrationKey);\n      }\n    }\n  }, {\n    key: \"_handleValueEvent\",\n    value: function _handleValueEvent(event) {\n      var _event$registration2 = event.registration,\n          key = _event$registration2.key,\n          eventRegistrationKey = _event$registration2.eventRegistrationKey;\n      var registration = this.getRegistration(eventRegistrationKey);\n\n      if (!registration) {\n        return this.native.off(key, eventRegistrationKey);\n      }\n\n      var snapshot;\n      var previousChildName;\n\n      if (event.eventType === 'value') {\n        snapshot = new _DatabaseDataSnapshot.default(registration.ref, event.data);\n      } else {\n        snapshot = new _DatabaseDataSnapshot.default(registration.ref, event.data.snapshot);\n        previousChildName = event.data.previousChildName;\n      }\n\n      return _SharedEventEmitter.default.emit(eventRegistrationKey, snapshot, previousChildName);\n    }\n  }, {\n    key: \"getRegistration\",\n    value: function getRegistration(registration) {\n      return this._reverseLookup[registration] ? Object.assign({}, this._reverseLookup[registration]) : null;\n    }\n  }, {\n    key: \"removeListenersForRegistrations\",\n    value: function removeListenersForRegistrations(registrations) {\n      if ((0, _common.isString)(registrations)) {\n        this.removeRegistration(registrations);\n\n        _SharedEventEmitter.default.removeAllListeners(registrations);\n\n        return 1;\n      }\n\n      if (!Array.isArray(registrations)) {\n        return 0;\n      }\n\n      for (var i = 0, len = registrations.length; i < len; i++) {\n        this.removeRegistration(registrations[i]);\n\n        _SharedEventEmitter.default.removeAllListeners(registrations[i]);\n      }\n\n      return registrations.length;\n    }\n  }, {\n    key: \"removeListenerRegistrations\",\n    value: function removeListenerRegistrations(listener, registrations) {\n      if (!Array.isArray(registrations)) {\n        return [];\n      }\n\n      var removed = [];\n\n      for (var i = 0, len = registrations.length; i < len; i++) {\n        var registration = registrations[i];\n\n        var subscriptions = _SharedEventEmitter.default._subscriber.getSubscriptionsForType(registration);\n\n        if (subscriptions) {\n          for (var j = 0, l = subscriptions.length; j < l; j++) {\n            var subscription = subscriptions[j];\n\n            if (subscription && subscription.listener === listener) {\n              subscription.remove();\n              removed.push(registration);\n              this.removeRegistration(registration);\n            }\n          }\n        }\n      }\n\n      return removed;\n    }\n  }, {\n    key: \"getRegistrationsByPath\",\n    value: function getRegistrationsByPath(path) {\n      var out = [];\n      var eventKeys = Object.keys(this._tree[path] || {});\n\n      for (var i = 0, len = eventKeys.length; i < len; i++) {\n        Array.prototype.push.apply(out, Object.keys(this._tree[path][eventKeys[i]]));\n      }\n\n      return out;\n    }\n  }, {\n    key: \"getRegistrationsByPathEvent\",\n    value: function getRegistrationsByPathEvent(path, eventType) {\n      if (!this._tree[path]) {\n        return [];\n      }\n\n      if (!this._tree[path][eventType]) {\n        return [];\n      }\n\n      return Object.keys(this._tree[path][eventType]);\n    }\n  }, {\n    key: \"getOneByPathEventListener\",\n    value: function getOneByPathEventListener(path, eventType, listener) {\n      if (!this._tree[path]) {\n        return null;\n      }\n\n      if (!this._tree[path][eventType]) {\n        return null;\n      }\n\n      var registrationsForPathEvent = Object.entries(this._tree[path][eventType]);\n\n      for (var i = 0; i < registrationsForPathEvent.length; i++) {\n        var registration = registrationsForPathEvent[i];\n\n        if (registration[1] === listener) {\n          return registration[0];\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"addRegistration\",\n    value: function addRegistration(registration) {\n      var _this = this;\n\n      var eventRegistrationKey = registration.eventRegistrationKey,\n          eventType = registration.eventType,\n          listener = registration.listener,\n          once = registration.once,\n          path = registration.path;\n\n      if (!this._tree[path]) {\n        this._tree[path] = {};\n      }\n\n      if (!this._tree[path][eventType]) {\n        this._tree[path][eventType] = {};\n      }\n\n      this._tree[path][eventType][eventRegistrationKey] = listener;\n      this._reverseLookup[eventRegistrationKey] = registration;\n\n      if (once) {\n        var subscription = _SharedEventEmitter.default.addListener(eventRegistrationKey, function (event) {\n          _this._onOnceRemoveRegistration(eventRegistrationKey, listener)(event);\n\n          subscription.remove();\n        });\n      } else {\n        _SharedEventEmitter.default.addListener(eventRegistrationKey, listener);\n      }\n\n      return eventRegistrationKey;\n    }\n  }, {\n    key: \"removeRegistration\",\n    value: function removeRegistration(registration) {\n      if (!this._reverseLookup[registration]) {\n        return false;\n      }\n\n      var _this$_reverseLookup$ = this._reverseLookup[registration],\n          path = _this$_reverseLookup$.path,\n          eventType = _this$_reverseLookup$.eventType,\n          once = _this$_reverseLookup$.once;\n\n      if (!this._tree[path]) {\n        delete this._reverseLookup[registration];\n        return false;\n      }\n\n      if (!this._tree[path][eventType]) {\n        delete this._reverseLookup[registration];\n        return false;\n      }\n\n      var registrationObj = this._reverseLookup[registration];\n\n      if (registrationObj && !once) {\n        this.native.off(registrationObj.key, registration);\n      }\n\n      delete this._tree[path][eventType][registration];\n      delete this._reverseLookup[registration];\n      return !!registrationObj;\n    }\n  }, {\n    key: \"_onOnceRemoveRegistration\",\n    value: function _onOnceRemoveRegistration(registration, listener) {\n      var _this2 = this;\n\n      return function () {\n        _this2.removeRegistration(registration);\n\n        listener.apply(void 0, arguments);\n      };\n    }\n  }]);\n  return DatabaseSyncTree;\n}();\n\nvar _default = new DatabaseSyncTree();\n\nexports.default = _default;","map":{"version":3,"names":["DatabaseSyncTree","_tree","_reverseLookup","SharedEventEmitter","addListener","_handleSyncEvent","bind","NativeModules","RNFBDatabaseQueryModule","event","body","error","_handleErrorEvent","_handleValueEvent","registration","eventRegistrationKey","registrationCancellationKey","getRegistration","NativeError","fromEvent","emit","removeRegistration","key","native","off","snapshot","previousChildName","eventType","DatabaseDataSnapshot","ref","data","Object","assign","registrations","isString","removeAllListeners","Array","isArray","i","len","length","listener","removed","subscriptions","_subscriber","getSubscriptionsForType","j","l","subscription","remove","push","path","out","eventKeys","keys","prototype","apply","registrationsForPathEvent","entries","once","_onOnceRemoveRegistration","registrationObj"],"sources":["C:/Users/sivap/OneDrive/Documents/GitHub/Seewe/node_modules/@react-native-firebase/database/lib/DatabaseSyncTree.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isString } from '@react-native-firebase/app/lib/common';\nimport NativeError from '@react-native-firebase/app/lib/internal/NativeFirebaseError';\nimport SharedEventEmitter from '@react-native-firebase/app/lib/internal/SharedEventEmitter';\nimport { NativeModules } from 'react-native';\nimport DatabaseDataSnapshot from './DatabaseDataSnapshot';\n\nclass DatabaseSyncTree {\n  constructor() {\n    this._tree = {};\n    this._reverseLookup = {};\n\n    SharedEventEmitter.addListener('database_sync_event', this._handleSyncEvent.bind(this));\n  }\n\n  get native() {\n    return NativeModules.RNFBDatabaseQueryModule;\n  }\n\n  /**\n   * Handles an incoming event from native\n   * @param event\n   * @private\n   */\n  _handleSyncEvent(event) {\n    const { body } = event;\n    if (body.error) {\n      this._handleErrorEvent(body);\n    } else {\n      this._handleValueEvent(body);\n    }\n  }\n\n  /**\n   * Routes native database query listener cancellation events to their js counterparts.\n   *\n   * @param event\n   * @private\n   */\n  _handleErrorEvent(event) {\n    // console.log('SyncTree.ERROR >>>', event);\n    const { eventRegistrationKey, registrationCancellationKey } = event.registration;\n\n    const registration = this.getRegistration(registrationCancellationKey);\n\n    if (registration) {\n      // build a new js error - we additionally attach\n      // the ref as a property for easier debugging\n      const error = NativeError.fromEvent(event.error, 'database');\n\n      // forward on to users .on(successCallback, cancellationCallback <-- listener\n      SharedEventEmitter.emit(registrationCancellationKey, error);\n\n      // remove the paired event registration - if we received a cancellation\n      // event then it's guaranteed that they'll be no further value events\n      this.removeRegistration(eventRegistrationKey);\n    }\n  }\n\n  /**\n   * Routes native database 'on' events to their js equivalent counterpart.\n   * If t is no longer any listeners remaining for this event we internally\n   * call the native unsub method to prevent further events coming through.\n   *\n   * @param event\n   * @private\n   */\n  _handleValueEvent(event) {\n    // console.log('SyncTree.VALUE >>>', event);\n    const { key, eventRegistrationKey } = event.registration;\n    const registration = this.getRegistration(eventRegistrationKey);\n    // console.log('SyncTree.registration >>>', registration);\n\n    if (!registration) {\n      // registration previously revoked\n      // notify native that the registration\n      // no longer exists so it can remove\n      // the native listeners\n      return this.native.off(key, eventRegistrationKey);\n    }\n\n    let snapshot;\n    let previousChildName;\n\n    // Value events don't return a previousChildName\n    if (event.eventType === 'value') {\n      snapshot = new DatabaseDataSnapshot(registration.ref, event.data);\n    } else {\n      snapshot = new DatabaseDataSnapshot(registration.ref, event.data.snapshot);\n      previousChildName = event.data.previousChildName;\n    }\n\n    // forward on to users .on(successCallback <-- listener\n    return SharedEventEmitter.emit(eventRegistrationKey, snapshot, previousChildName);\n  }\n\n  /**\n   * Returns registration information such as appName, ref, path and registration keys.\n   *\n   * @param registration\n   * @return {null}\n   */\n  getRegistration(registration) {\n    return this._reverseLookup[registration]\n      ? Object.assign({}, this._reverseLookup[registration])\n      : null;\n  }\n\n  /**\n   * Removes all listeners for the specified registration keys.\n   *\n   * @param registrations\n   * @return {number}\n   */\n  removeListenersForRegistrations(registrations) {\n    if (isString(registrations)) {\n      this.removeRegistration(registrations);\n      SharedEventEmitter.removeAllListeners(registrations);\n      return 1;\n    }\n\n    if (!Array.isArray(registrations)) {\n      return 0;\n    }\n    for (let i = 0, len = registrations.length; i < len; i++) {\n      this.removeRegistration(registrations[i]);\n      SharedEventEmitter.removeAllListeners(registrations[i]);\n    }\n\n    return registrations.length;\n  }\n\n  /**\n   * Removes a specific listener from the specified registrations.\n   *\n   * @param listener\n   * @param registrations\n   * @return {Array} array of registrations removed\n   */\n  removeListenerRegistrations(listener, registrations) {\n    if (!Array.isArray(registrations)) {\n      return [];\n    }\n    const removed = [];\n\n    for (let i = 0, len = registrations.length; i < len; i++) {\n      const registration = registrations[i];\n      const subscriptions = SharedEventEmitter._subscriber.getSubscriptionsForType(registration);\n\n      if (subscriptions) {\n        for (let j = 0, l = subscriptions.length; j < l; j++) {\n          const subscription = subscriptions[j];\n          // The subscription may have been removed during this event loop.\n          // its listener matches the listener in method parameters\n          if (subscription && subscription.listener === listener) {\n            subscription.remove();\n            removed.push(registration);\n            this.removeRegistration(registration);\n          }\n        }\n      }\n    }\n\n    return removed;\n  }\n\n  /**\n   * Returns an array of all registration keys for the specified path.\n   *\n   * @param path\n   * @return {Array}\n   */\n  getRegistrationsByPath(path) {\n    const out = [];\n    const eventKeys = Object.keys(this._tree[path] || {});\n\n    for (let i = 0, len = eventKeys.length; i < len; i++) {\n      Array.prototype.push.apply(out, Object.keys(this._tree[path][eventKeys[i]]));\n    }\n\n    return out;\n  }\n\n  /**\n   * Returns an array of all registration keys for the specified path and eventType.\n   *\n   * @param path\n   * @param eventType\n   * @return {Array}\n   */\n  getRegistrationsByPathEvent(path, eventType) {\n    if (!this._tree[path]) {\n      return [];\n    }\n    if (!this._tree[path][eventType]) {\n      return [];\n    }\n\n    return Object.keys(this._tree[path][eventType]);\n  }\n\n  /**\n   * Returns a single registration key for the specified path, eventType, and listener\n   *\n   * @param path\n   * @param eventType\n   * @param listener\n   * @return {Array}\n   */\n  getOneByPathEventListener(path, eventType, listener) {\n    if (!this._tree[path]) {\n      return null;\n    }\n    if (!this._tree[path][eventType]) {\n      return null;\n    }\n\n    const registrationsForPathEvent = Object.entries(this._tree[path][eventType]);\n\n    for (let i = 0; i < registrationsForPathEvent.length; i++) {\n      const registration = registrationsForPathEvent[i];\n      if (registration[1] === listener) {\n        return registration[0];\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Register a new listener.\n   *\n   * @param registration\n   */\n  addRegistration(registration) {\n    const { eventRegistrationKey, eventType, listener, once, path } = registration;\n\n    if (!this._tree[path]) {\n      this._tree[path] = {};\n    }\n    if (!this._tree[path][eventType]) {\n      this._tree[path][eventType] = {};\n    }\n\n    this._tree[path][eventType][eventRegistrationKey] = listener;\n    this._reverseLookup[eventRegistrationKey] = registration;\n\n    if (once) {\n      const subscription = SharedEventEmitter.addListener(eventRegistrationKey, event => {\n        this._onOnceRemoveRegistration(eventRegistrationKey, listener)(event);\n        subscription.remove();\n      });\n    } else {\n      SharedEventEmitter.addListener(eventRegistrationKey, listener);\n    }\n\n    return eventRegistrationKey;\n  }\n\n  /**\n   * Remove a registration, if it's not a `once` registration then instructs native\n   * to also remove the underlying database query listener.\n   *\n   * @param registration\n   * @return {boolean}\n   */\n  removeRegistration(registration) {\n    if (!this._reverseLookup[registration]) {\n      return false;\n    }\n    const { path, eventType, once } = this._reverseLookup[registration];\n\n    if (!this._tree[path]) {\n      delete this._reverseLookup[registration];\n      return false;\n    }\n\n    if (!this._tree[path][eventType]) {\n      delete this._reverseLookup[registration];\n      return false;\n    }\n\n    // we don't want `once` events to notify native as they're already\n    // automatically unsubscribed on native when the first event is sent\n    const registrationObj = this._reverseLookup[registration];\n    if (registrationObj && !once) {\n      this.native.off(registrationObj.key, registration);\n    }\n\n    delete this._tree[path][eventType][registration];\n    delete this._reverseLookup[registration];\n\n    return !!registrationObj;\n  }\n\n  /**\n   * Wraps a `once` listener with a new function that self de-registers.\n   *\n   * @param registration\n   * @param listener\n   * @return {function(...[*])}\n   * @private\n   */\n  _onOnceRemoveRegistration(registration, listener) {\n    return (...args) => {\n      this.removeRegistration(registration);\n      listener(...args);\n    };\n  }\n}\n\nexport default new DatabaseSyncTree();\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}