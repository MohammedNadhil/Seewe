{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.provideReferenceClass = provideReferenceClass;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _common = require(\"@react-native-firebase/app/lib/common\");\n\nvar _DatabaseDataSnapshot = _interopRequireDefault(require(\"./DatabaseDataSnapshot\"));\n\nvar _DatabaseSyncTree = _interopRequireDefault(require(\"./DatabaseSyncTree\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar eventTypes = ['value', 'child_added', 'child_changed', 'child_moved', 'child_removed'];\nvar DatabaseReference = null;\n\nfunction provideReferenceClass(databaseReference) {\n  DatabaseReference = databaseReference;\n}\n\nvar listeners = 0;\n\nvar DatabaseQuery = function (_ReferenceBase) {\n  (0, _inherits2.default)(DatabaseQuery, _ReferenceBase);\n\n  var _super = _createSuper(DatabaseQuery);\n\n  function DatabaseQuery(database, path, modifiers) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, DatabaseQuery);\n    _this = _super.call(this, path);\n    _this._database = database;\n    _this._modifiers = modifiers;\n    return _this;\n  }\n\n  (0, _createClass2.default)(DatabaseQuery, [{\n    key: \"ref\",\n    get: function get() {\n      return new DatabaseReference(this._database, this.path);\n    }\n  }, {\n    key: \"endAt\",\n    value: function endAt(value, key) {\n      if (!(0, _common.isNumber)(value) && !(0, _common.isString)(value) && !(0, _common.isBoolean)(value) && !(0, _common.isNull)(value)) {\n        throw new Error(\"firebase.database().ref().endAt(*) 'value' must be a number, string, boolean or null value.\");\n      }\n\n      if (!(0, _common.isUndefined)(key) && !(0, _common.isString)(key)) {\n        throw new Error(\"firebase.database().ref().endAt(_, *) 'key' must be a string value if defined.\");\n      }\n\n      if (this._modifiers.hasEndAt()) {\n        throw new Error('firebase.database().ref().endAt() Ending point was already set (by another call to endAt or equalTo).');\n      }\n\n      var modifiers = this._modifiers._copy().endAt(value, key);\n\n      modifiers.validateModifiers('firebase.database().ref().endAt()');\n      return new DatabaseQuery(this._database, this.path, modifiers);\n    }\n  }, {\n    key: \"equalTo\",\n    value: function equalTo(value, key) {\n      if (!(0, _common.isNumber)(value) && !(0, _common.isString)(value) && !(0, _common.isBoolean)(value) && !(0, _common.isNull)(value)) {\n        throw new Error(\"firebase.database().ref().equalTo(*) 'value' must be a number, string, boolean or null value.\");\n      }\n\n      if (!(0, _common.isUndefined)(key) && !(0, _common.isString)(key)) {\n        throw new Error(\"firebase.database().ref().equalTo(_, *) 'key' must be a string value if defined.\");\n      }\n\n      if (this._modifiers.hasStartAt()) {\n        throw new Error('firebase.database().ref().equalTo() Starting point was already set (by another call to startAt or equalTo).');\n      }\n\n      if (this._modifiers.hasEndAt()) {\n        throw new Error('firebase.database().ref().equalTo() Ending point was already set (by another call to endAt or equalTo).');\n      }\n\n      return this.startAt(value, key).endAt(value, key);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      if (!(other instanceof DatabaseQuery)) {\n        throw new Error(\"firebase.database().ref().isEqual(*) 'other' must be an instance of Query.\");\n      }\n\n      var sameApp = other._database.app === this._database.app;\n      var sameDatabasePath = other.toString() === this.toString();\n\n      var sameModifiers = other._modifiers.toString() === this._modifiers.toString();\n\n      return sameApp && sameDatabasePath && sameModifiers;\n    }\n  }, {\n    key: \"limitToFirst\",\n    value: function limitToFirst(limit) {\n      if (this._modifiers.isValidLimit(limit)) {\n        throw new Error(\"firebase.database().ref().limitToFirst(*) 'limit' must be a positive integer value.\");\n      }\n\n      if (this._modifiers.hasLimit()) {\n        throw new Error('firebase.database().ref().limitToFirst(*) Limit was already set (by another call to limitToFirst, or limitToLast)');\n      }\n\n      return new DatabaseQuery(this._database, this.path, this._modifiers._copy().limitToFirst(limit));\n    }\n  }, {\n    key: \"limitToLast\",\n    value: function limitToLast(limit) {\n      if (this._modifiers.isValidLimit(limit)) {\n        throw new Error(\"firebase.database().ref().limitToLast(*) 'limit' must be a positive integer value.\");\n      }\n\n      if (this._modifiers.hasLimit()) {\n        throw new Error('firebase.database().ref().limitToLast(*) Limit was already set (by another call to limitToFirst, or limitToLast)');\n      }\n\n      return new DatabaseQuery(this._database, this.path, this._modifiers._copy().limitToLast(limit));\n    }\n  }, {\n    key: \"off\",\n    value: function off(eventType, callback, context) {\n      if (arguments.length === 0) {\n        return _DatabaseSyncTree.default.removeListenersForRegistrations(_DatabaseSyncTree.default.getRegistrationsByPath(this.path));\n      }\n\n      if (!(0, _common.isUndefined)(eventType) && !eventTypes.includes(eventType)) {\n        throw new Error(\"firebase.database().ref().off(*) 'eventType' must be one of \" + eventTypes.join(', ') + \".\");\n      }\n\n      if (!(0, _common.isUndefined)(callback) && !(0, _common.isFunction)(callback)) {\n        throw new Error(\"firebase.database().ref().off(_, *) 'callback' must be a function.\");\n      }\n\n      if (!(0, _common.isUndefined)(context) && !(0, _common.isObject)(context)) {\n        throw new Error(\"firebase.database().ref().off(_, _, *) 'context' must be an object.\");\n      }\n\n      if (eventType && callback) {\n        var registration = _DatabaseSyncTree.default.getOneByPathEventListener(this.path, eventType, callback);\n\n        if (!registration) {\n          return [];\n        }\n\n        _DatabaseSyncTree.default.removeListenersForRegistrations([registration + \"$cancelled\"]);\n\n        return _DatabaseSyncTree.default.removeListenerRegistrations(callback, [registration]);\n      }\n\n      var registrations = _DatabaseSyncTree.default.getRegistrationsByPathEvent(this.path, eventType);\n\n      _DatabaseSyncTree.default.removeListenersForRegistrations(_DatabaseSyncTree.default.getRegistrationsByPathEvent(this.path, eventType + \"$cancelled\"));\n\n      return _DatabaseSyncTree.default.removeListenersForRegistrations(registrations);\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventType, callback, cancelCallbackOrContext, context) {\n      if (!eventTypes.includes(eventType)) {\n        throw new Error(\"firebase.database().ref().on(*) 'eventType' must be one of \" + eventTypes.join(', ') + \".\");\n      }\n\n      if (!(0, _common.isFunction)(callback)) {\n        throw new Error(\"firebase.database().ref().on(_, *) 'callback' must be a function.\");\n      }\n\n      if (!(0, _common.isUndefined)(cancelCallbackOrContext) && !(0, _common.isFunction)(cancelCallbackOrContext) && !(0, _common.isObject)(cancelCallbackOrContext)) {\n        throw new Error(\"firebase.database().ref().on(_, _, *) 'cancelCallbackOrContext' must be a function or object.\");\n      }\n\n      if (!(0, _common.isUndefined)(context) && !(0, _common.isObject)(context)) {\n        throw new Error(\"firebase.database().ref().on(_, _, _, *) 'context' must be an object.\");\n      }\n\n      var queryKey = this._generateQueryKey();\n\n      var eventRegistrationKey = this._generateQueryEventKey(eventType);\n\n      var registrationCancellationKey = eventRegistrationKey + \"$cancelled\";\n\n      var _context = cancelCallbackOrContext && !(0, _common.isFunction)(cancelCallbackOrContext) ? cancelCallbackOrContext : context;\n\n      _DatabaseSyncTree.default.addRegistration({\n        eventType: eventType,\n        ref: this.ref,\n        path: this.path,\n        key: queryKey,\n        appName: this._database.app.name,\n        dbURL: this._database._customUrlOrRegion,\n        eventRegistrationKey: eventRegistrationKey,\n        listener: _context ? callback.bind(_context) : callback\n      });\n\n      if (cancelCallbackOrContext && (0, _common.isFunction)(cancelCallbackOrContext)) {\n        _DatabaseSyncTree.default.addRegistration({\n          ref: this.ref,\n          once: true,\n          path: this.path,\n          key: queryKey,\n          appName: this._database.app.name,\n          dbURL: this._database._customUrlOrRegion,\n          eventType: eventType + \"$cancelled\",\n          eventRegistrationKey: registrationCancellationKey,\n          listener: _context ? cancelCallbackOrContext.bind(_context) : cancelCallbackOrContext\n        });\n      }\n\n      this._database.native.on({\n        eventType: eventType,\n        path: this.path,\n        key: queryKey,\n        appName: this._database.app.name,\n        modifiers: this._modifiers.toArray(),\n        hasCancellationCallback: (0, _common.isFunction)(cancelCallbackOrContext),\n        registration: {\n          eventRegistrationKey: eventRegistrationKey,\n          key: queryKey,\n          registrationCancellationKey: registrationCancellationKey\n        }\n      });\n\n      listeners += 1;\n      return callback;\n    }\n  }, {\n    key: \"once\",\n    value: function once(eventType, successCallBack, failureCallbackOrContext, context) {\n      var _this2 = this;\n\n      if (!eventTypes.includes(eventType)) {\n        throw new Error(\"firebase.database().ref().once(*) 'eventType' must be one of \" + eventTypes.join(', ') + \".\");\n      }\n\n      if (!(0, _common.isUndefined)(successCallBack) && !(0, _common.isFunction)(successCallBack)) {\n        throw new Error(\"firebase.database().ref().once(_, *) 'successCallBack' must be a function.\");\n      }\n\n      if (!(0, _common.isUndefined)(failureCallbackOrContext) && !(0, _common.isObject)(failureCallbackOrContext) && !(0, _common.isFunction)(failureCallbackOrContext)) {\n        throw new Error(\"firebase.database().ref().once(_, _, *) 'failureCallbackOrContext' must be a function or context.\");\n      }\n\n      if (!(0, _common.isUndefined)(context) && !(0, _common.isObject)(context)) {\n        throw new Error(\"firebase.database().ref().once(_, _, _, *) 'context' must be a context object.\");\n      }\n\n      var modifiers = this._modifiers._copy().toArray();\n\n      return this._database.native.once(this.path, modifiers, eventType).then(function (result) {\n        var dataSnapshot;\n        var previousChildName;\n\n        if (eventType === 'value') {\n          dataSnapshot = new _DatabaseDataSnapshot.default(_this2.ref, result);\n        } else {\n          dataSnapshot = new _DatabaseDataSnapshot.default(_this2.ref, result.snapshot);\n          previousChildName = result.previousChildName;\n        }\n\n        if ((0, _common.isFunction)(successCallBack)) {\n          if ((0, _common.isObject)(failureCallbackOrContext)) {\n            successCallBack.bind(failureCallbackOrContext)(dataSnapshot, previousChildName);\n          } else if ((0, _common.isObject)(context)) {\n            successCallBack.bind(context)(dataSnapshot, previousChildName);\n          } else {\n            successCallBack(dataSnapshot, previousChildName);\n          }\n        }\n\n        return dataSnapshot;\n      }).catch(function (error) {\n        if ((0, _common.isFunction)(failureCallbackOrContext)) {\n          failureCallbackOrContext(error);\n        }\n\n        return Promise.reject(error);\n      });\n    }\n  }, {\n    key: \"orderByChild\",\n    value: function orderByChild(path) {\n      if (!(0, _common.isString)(path)) {\n        throw new Error(\"firebase.database().ref().orderByChild(*) 'path' must be a string value.\");\n      }\n\n      if ((0, _common.pathIsEmpty)(path)) {\n        throw new Error(\"firebase.database().ref().orderByChild(*) 'path' cannot be empty. Use orderByValue instead.\");\n      }\n\n      if (this._modifiers.hasOrderBy()) {\n        throw new Error(\"firebase.database().ref().orderByChild(*) You can't combine multiple orderBy calls.\");\n      }\n\n      var modifiers = this._modifiers._copy().orderByChild(path);\n\n      modifiers.validateModifiers('firebase.database().ref().orderByChild()');\n      return new DatabaseQuery(this._database, this.path, modifiers);\n    }\n  }, {\n    key: \"orderByKey\",\n    value: function orderByKey() {\n      if (this._modifiers.hasOrderBy()) {\n        throw new Error(\"firebase.database().ref().orderByKey() You can't combine multiple orderBy calls.\");\n      }\n\n      var modifiers = this._modifiers._copy().orderByKey();\n\n      modifiers.validateModifiers('firebase.database().ref().orderByKey()');\n      return new DatabaseQuery(this._database, this.path, modifiers);\n    }\n  }, {\n    key: \"orderByPriority\",\n    value: function orderByPriority() {\n      if (this._modifiers.hasOrderBy()) {\n        throw new Error(\"firebase.database().ref().orderByPriority() You can't combine multiple orderBy calls.\");\n      }\n\n      var modifiers = this._modifiers._copy().orderByPriority();\n\n      modifiers.validateModifiers('firebase.database().ref().orderByPriority()');\n      return new DatabaseQuery(this._database, this.path, modifiers);\n    }\n  }, {\n    key: \"orderByValue\",\n    value: function orderByValue() {\n      if (this._modifiers.hasOrderBy()) {\n        throw new Error(\"firebase.database().ref().orderByValue() You can't combine multiple orderBy calls.\");\n      }\n\n      var modifiers = this._modifiers._copy().orderByValue();\n\n      modifiers.validateModifiers('firebase.database().ref().orderByValue()');\n      return new DatabaseQuery(this._database, this.path, modifiers);\n    }\n  }, {\n    key: \"startAt\",\n    value: function startAt(value, key) {\n      if (!(0, _common.isNumber)(value) && !(0, _common.isString)(value) && !(0, _common.isBoolean)(value) && !(0, _common.isNull)(value)) {\n        throw new Error(\"firebase.database().ref().startAt(*) 'value' must be a number, string, boolean or null value.\");\n      }\n\n      if (!(0, _common.isUndefined)(key) && !(0, _common.isString)(key)) {\n        throw new Error(\"firebase.database().ref().startAt(_, *) 'key' must be a string value if defined.\");\n      }\n\n      if (this._modifiers.hasStartAt()) {\n        throw new Error('firebase.database().ref().startAt() Starting point was already set (by another call to startAt or equalTo).');\n      }\n\n      var modifiers = this._modifiers._copy().startAt(value, key);\n\n      modifiers.validateModifiers('firebase.database().ref().startAt()');\n      return new DatabaseQuery(this._database, this.path, modifiers);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"\" + this._database._customUrlOrRegion + (0, _common.pathToUrlEncodedString)(this.path);\n    }\n  }, {\n    key: \"keepSynced\",\n    value: function keepSynced(bool) {\n      if (!(0, _common.isBoolean)(bool)) {\n        throw new Error(\"firebase.database().ref().keepSynced(*) 'bool' value must be a boolean value.\");\n      }\n\n      return this._database.native.keepSynced(this._generateQueryKey(), this.path, this._modifiers.toArray(), bool);\n    }\n  }, {\n    key: \"_generateQueryKey\",\n    value: function _generateQueryKey() {\n      return \"$\" + this._database._customUrlOrRegion + \"$/\" + this.path + \"$\" + this._database.app.name + \"$\" + this._modifiers.toString();\n    }\n  }, {\n    key: \"_generateQueryEventKey\",\n    value: function _generateQueryEventKey(eventType) {\n      return this._generateQueryKey() + \"$\" + listeners + \"$\" + eventType;\n    }\n  }]);\n  return DatabaseQuery;\n}(_common.ReferenceBase);\n\nexports.default = DatabaseQuery;","map":{"version":3,"names":["eventTypes","DatabaseReference","provideReferenceClass","databaseReference","listeners","DatabaseQuery","database","path","modifiers","_database","_modifiers","value","key","isNumber","isString","isBoolean","isNull","Error","isUndefined","hasEndAt","_copy","endAt","validateModifiers","hasStartAt","startAt","other","sameApp","app","sameDatabasePath","toString","sameModifiers","limit","isValidLimit","hasLimit","limitToFirst","limitToLast","eventType","callback","context","arguments","length","DatabaseSyncTree","removeListenersForRegistrations","getRegistrationsByPath","includes","join","isFunction","isObject","registration","getOneByPathEventListener","removeListenerRegistrations","registrations","getRegistrationsByPathEvent","cancelCallbackOrContext","queryKey","_generateQueryKey","eventRegistrationKey","_generateQueryEventKey","registrationCancellationKey","_context","addRegistration","ref","appName","name","dbURL","_customUrlOrRegion","listener","bind","once","native","on","toArray","hasCancellationCallback","successCallBack","failureCallbackOrContext","then","result","dataSnapshot","previousChildName","DatabaseDataSnapshot","snapshot","catch","error","Promise","reject","pathIsEmpty","hasOrderBy","orderByChild","orderByKey","orderByPriority","orderByValue","pathToUrlEncodedString","bool","keepSynced","ReferenceBase"],"sources":["C:/Users/sivap/OneDrive/Documents/GitHub/Seewe/node_modules/@react-native-firebase/database/lib/DatabaseQuery.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  isBoolean,\n  isFunction,\n  isNull,\n  isNumber,\n  isObject,\n  isString,\n  isUndefined,\n  pathIsEmpty,\n  pathToUrlEncodedString,\n  ReferenceBase,\n} from '@react-native-firebase/app/lib/common';\nimport DatabaseDataSnapshot from './DatabaseDataSnapshot';\nimport DatabaseSyncTree from './DatabaseSyncTree';\n\nconst eventTypes = ['value', 'child_added', 'child_changed', 'child_moved', 'child_removed'];\n\n// To avoid React Native require cycle warnings\nlet DatabaseReference = null;\nexport function provideReferenceClass(databaseReference) {\n  DatabaseReference = databaseReference;\n}\n\n// Internal listener count\nlet listeners = 0;\n\nexport default class DatabaseQuery extends ReferenceBase {\n  constructor(database, path, modifiers) {\n    super(path);\n    this._database = database;\n    this._modifiers = modifiers;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Query.html#endat\n   */\n  get ref() {\n    return new DatabaseReference(this._database, this.path);\n  }\n\n  /**\n   *\n   * @param value\n   * @param key\n   * @return {DatabaseQuery}\n   */\n  endAt(value, key) {\n    if (!isNumber(value) && !isString(value) && !isBoolean(value) && !isNull(value)) {\n      throw new Error(\n        \"firebase.database().ref().endAt(*) 'value' must be a number, string, boolean or null value.\",\n      );\n    }\n\n    if (!isUndefined(key) && !isString(key)) {\n      throw new Error(\n        \"firebase.database().ref().endAt(_, *) 'key' must be a string value if defined.\",\n      );\n    }\n\n    if (this._modifiers.hasEndAt()) {\n      throw new Error(\n        'firebase.database().ref().endAt() Ending point was already set (by another call to endAt or equalTo).',\n      );\n    }\n\n    const modifiers = this._modifiers._copy().endAt(value, key);\n    modifiers.validateModifiers('firebase.database().ref().endAt()');\n\n    return new DatabaseQuery(this._database, this.path, modifiers);\n  }\n\n  /**\n   *\n   * @param value\n   * @param key\n   * @return {DatabaseQuery}\n   */\n  equalTo(value, key) {\n    if (!isNumber(value) && !isString(value) && !isBoolean(value) && !isNull(value)) {\n      throw new Error(\n        \"firebase.database().ref().equalTo(*) 'value' must be a number, string, boolean or null value.\",\n      );\n    }\n\n    if (!isUndefined(key) && !isString(key)) {\n      throw new Error(\n        \"firebase.database().ref().equalTo(_, *) 'key' must be a string value if defined.\",\n      );\n    }\n\n    if (this._modifiers.hasStartAt()) {\n      throw new Error(\n        'firebase.database().ref().equalTo() Starting point was already set (by another call to startAt or equalTo).',\n      );\n    }\n\n    if (this._modifiers.hasEndAt()) {\n      throw new Error(\n        'firebase.database().ref().equalTo() Ending point was already set (by another call to endAt or equalTo).',\n      );\n    }\n\n    return this.startAt(value, key).endAt(value, key);\n  }\n\n  /**\n   *\n   * @param other\n   * @return {boolean}\n   */\n  isEqual(other) {\n    if (!(other instanceof DatabaseQuery)) {\n      throw new Error(\"firebase.database().ref().isEqual(*) 'other' must be an instance of Query.\");\n    }\n\n    const sameApp = other._database.app === this._database.app;\n    const sameDatabasePath = other.toString() === this.toString();\n    const sameModifiers = other._modifiers.toString() === this._modifiers.toString();\n\n    return sameApp && sameDatabasePath && sameModifiers;\n  }\n\n  /**\n   *\n   * @param limit\n   * @return {DatabaseQuery}\n   */\n  limitToFirst(limit) {\n    if (this._modifiers.isValidLimit(limit)) {\n      throw new Error(\n        \"firebase.database().ref().limitToFirst(*) 'limit' must be a positive integer value.\",\n      );\n    }\n\n    if (this._modifiers.hasLimit()) {\n      throw new Error(\n        'firebase.database().ref().limitToFirst(*) Limit was already set (by another call to limitToFirst, or limitToLast)',\n      );\n    }\n\n    return new DatabaseQuery(\n      this._database,\n      this.path,\n      this._modifiers._copy().limitToFirst(limit),\n    );\n  }\n\n  /**\n   *\n   * @param limit\n   * @return {DatabaseQuery}\n   */\n  limitToLast(limit) {\n    if (this._modifiers.isValidLimit(limit)) {\n      throw new Error(\n        \"firebase.database().ref().limitToLast(*) 'limit' must be a positive integer value.\",\n      );\n    }\n\n    if (this._modifiers.hasLimit()) {\n      throw new Error(\n        'firebase.database().ref().limitToLast(*) Limit was already set (by another call to limitToFirst, or limitToLast)',\n      );\n    }\n\n    return new DatabaseQuery(this._database, this.path, this._modifiers._copy().limitToLast(limit));\n  }\n\n  /**\n   *\n   * @param eventType\n   * @param callback\n   * @param context\n   * @return {DatabaseQuery}\n   */\n  off(eventType, callback, context) {\n    //\n    if (arguments.length === 0) {\n      // Firebase Docs:\n      //    if no eventType or callback is specified, all callbacks for the Reference will be removed\n      return DatabaseSyncTree.removeListenersForRegistrations(\n        DatabaseSyncTree.getRegistrationsByPath(this.path),\n      );\n    }\n\n    if (!isUndefined(eventType) && !eventTypes.includes(eventType)) {\n      throw new Error(\n        `firebase.database().ref().off(*) 'eventType' must be one of ${eventTypes.join(', ')}.`,\n      );\n    }\n\n    if (!isUndefined(callback) && !isFunction(callback)) {\n      throw new Error(\"firebase.database().ref().off(_, *) 'callback' must be a function.\");\n    }\n\n    if (!isUndefined(context) && !isObject(context)) {\n      throw new Error(\"firebase.database().ref().off(_, _, *) 'context' must be an object.\");\n    }\n\n    // Firebase Docs:\n    //     Note that if on() was called\n    //     multiple times with the same eventType and callback, the callback will be called\n    //     multiple times for each event, and off() must be called multiple times to\n    //     remove the callback.\n\n    // Remove only a single registration\n    if (eventType && callback) {\n      const registration = DatabaseSyncTree.getOneByPathEventListener(\n        this.path,\n        eventType,\n        callback,\n      );\n      if (!registration) {\n        return [];\n      }\n\n      // remove the paired cancellation registration if any exist\n      DatabaseSyncTree.removeListenersForRegistrations([`${registration}$cancelled`]);\n\n      // remove only the first registration to match firebase web sdk\n      // call multiple times to remove multiple registrations\n      return DatabaseSyncTree.removeListenerRegistrations(callback, [registration]);\n    }\n\n    // Firebase Docs:\n    //     If a callback is not specified, all callbacks for the specified eventType will be removed.\n    const registrations = DatabaseSyncTree.getRegistrationsByPathEvent(this.path, eventType);\n\n    DatabaseSyncTree.removeListenersForRegistrations(\n      DatabaseSyncTree.getRegistrationsByPathEvent(this.path, `${eventType}$cancelled`),\n    );\n\n    return DatabaseSyncTree.removeListenersForRegistrations(registrations);\n  }\n\n  /**\n   *\n   * @param eventType\n   * @param callback\n   * @param cancelCallbackOrContext\n   * @param context\n   * @return {DatabaseQuery}\n   */\n  on(eventType, callback, cancelCallbackOrContext, context) {\n    if (!eventTypes.includes(eventType)) {\n      throw new Error(\n        `firebase.database().ref().on(*) 'eventType' must be one of ${eventTypes.join(', ')}.`,\n      );\n    }\n\n    if (!isFunction(callback)) {\n      throw new Error(\"firebase.database().ref().on(_, *) 'callback' must be a function.\");\n    }\n\n    if (\n      !isUndefined(cancelCallbackOrContext) &&\n      !isFunction(cancelCallbackOrContext) &&\n      !isObject(cancelCallbackOrContext)\n    ) {\n      throw new Error(\n        \"firebase.database().ref().on(_, _, *) 'cancelCallbackOrContext' must be a function or object.\",\n      );\n    }\n\n    if (!isUndefined(context) && !isObject(context)) {\n      throw new Error(\"firebase.database().ref().on(_, _, _, *) 'context' must be an object.\");\n    }\n\n    const queryKey = this._generateQueryKey();\n    const eventRegistrationKey = this._generateQueryEventKey(eventType);\n    const registrationCancellationKey = `${eventRegistrationKey}$cancelled`;\n    const _context =\n      cancelCallbackOrContext && !isFunction(cancelCallbackOrContext)\n        ? cancelCallbackOrContext\n        : context;\n\n    // Add a new SyncTree registration\n    DatabaseSyncTree.addRegistration({\n      eventType,\n      ref: this.ref,\n      path: this.path,\n      key: queryKey,\n      appName: this._database.app.name,\n      dbURL: this._database._customUrlOrRegion,\n      eventRegistrationKey,\n      listener: _context ? callback.bind(_context) : callback,\n    });\n\n    if (cancelCallbackOrContext && isFunction(cancelCallbackOrContext)) {\n      // cancellations have their own separate registration\n      // as these are one off events, and they're not guaranteed\n      // to occur either, only happens on failure to register on native\n\n      DatabaseSyncTree.addRegistration({\n        ref: this.ref,\n        once: true,\n        path: this.path,\n        key: queryKey,\n        appName: this._database.app.name,\n        dbURL: this._database._customUrlOrRegion,\n        eventType: `${eventType}$cancelled`,\n        eventRegistrationKey: registrationCancellationKey,\n        listener: _context ? cancelCallbackOrContext.bind(_context) : cancelCallbackOrContext,\n      });\n    }\n\n    this._database.native.on({\n      eventType,\n      path: this.path,\n      key: queryKey,\n      appName: this._database.app.name,\n      modifiers: this._modifiers.toArray(),\n      hasCancellationCallback: isFunction(cancelCallbackOrContext),\n      registration: {\n        eventRegistrationKey,\n        key: queryKey,\n        registrationCancellationKey,\n      },\n    });\n\n    // increment number of listeners - just a short way of making\n    // every registration unique per .on() call\n    listeners += 1;\n\n    return callback;\n  }\n\n  /**\n   * @param eventType\n   * @param successCallBack\n   * @param failureCallbackOrContext\n   * @param context\n   */\n  once(eventType, successCallBack, failureCallbackOrContext, context) {\n    if (!eventTypes.includes(eventType)) {\n      throw new Error(\n        `firebase.database().ref().once(*) 'eventType' must be one of ${eventTypes.join(', ')}.`,\n      );\n    }\n\n    if (!isUndefined(successCallBack) && !isFunction(successCallBack)) {\n      throw new Error(\"firebase.database().ref().once(_, *) 'successCallBack' must be a function.\");\n    }\n\n    if (\n      !isUndefined(failureCallbackOrContext) &&\n      !isObject(failureCallbackOrContext) &&\n      !isFunction(failureCallbackOrContext)\n    ) {\n      throw new Error(\n        \"firebase.database().ref().once(_, _, *) 'failureCallbackOrContext' must be a function or context.\",\n      );\n    }\n\n    if (!isUndefined(context) && !isObject(context)) {\n      throw new Error(\n        \"firebase.database().ref().once(_, _, _, *) 'context' must be a context object.\",\n      );\n    }\n\n    const modifiers = this._modifiers._copy().toArray();\n\n    return this._database.native\n      .once(this.path, modifiers, eventType)\n      .then(result => {\n        let dataSnapshot;\n        let previousChildName;\n\n        // Child based events return a previousChildName\n        if (eventType === 'value') {\n          dataSnapshot = new DatabaseDataSnapshot(this.ref, result);\n        } else {\n          dataSnapshot = new DatabaseDataSnapshot(this.ref, result.snapshot);\n          previousChildName = result.previousChildName;\n        }\n\n        if (isFunction(successCallBack)) {\n          if (isObject(failureCallbackOrContext)) {\n            successCallBack.bind(failureCallbackOrContext)(dataSnapshot, previousChildName);\n          } else if (isObject(context)) {\n            successCallBack.bind(context)(dataSnapshot, previousChildName);\n          } else {\n            successCallBack(dataSnapshot, previousChildName);\n          }\n        }\n\n        return dataSnapshot;\n      })\n      .catch(error => {\n        if (isFunction(failureCallbackOrContext)) {\n          failureCallbackOrContext(error);\n        }\n        return Promise.reject(error);\n      });\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Query.html#orderbychild\n   */\n  orderByChild(path) {\n    if (!isString(path)) {\n      throw new Error(\"firebase.database().ref().orderByChild(*) 'path' must be a string value.\");\n    }\n\n    if (pathIsEmpty(path)) {\n      throw new Error(\n        \"firebase.database().ref().orderByChild(*) 'path' cannot be empty. Use orderByValue instead.\",\n      );\n    }\n\n    if (this._modifiers.hasOrderBy()) {\n      throw new Error(\n        \"firebase.database().ref().orderByChild(*) You can't combine multiple orderBy calls.\",\n      );\n    }\n\n    const modifiers = this._modifiers._copy().orderByChild(path);\n    modifiers.validateModifiers('firebase.database().ref().orderByChild()');\n\n    return new DatabaseQuery(this._database, this.path, modifiers);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Query.html#orderbykey\n   */\n  orderByKey() {\n    if (this._modifiers.hasOrderBy()) {\n      throw new Error(\n        \"firebase.database().ref().orderByKey() You can't combine multiple orderBy calls.\",\n      );\n    }\n\n    const modifiers = this._modifiers._copy().orderByKey();\n    modifiers.validateModifiers('firebase.database().ref().orderByKey()');\n\n    return new DatabaseQuery(this._database, this.path, modifiers);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Query.html#orderbypriority\n   */\n  orderByPriority() {\n    if (this._modifiers.hasOrderBy()) {\n      throw new Error(\n        \"firebase.database().ref().orderByPriority() You can't combine multiple orderBy calls.\",\n      );\n    }\n\n    const modifiers = this._modifiers._copy().orderByPriority();\n    modifiers.validateModifiers('firebase.database().ref().orderByPriority()');\n\n    return new DatabaseQuery(this._database, this.path, modifiers);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Query.html#orderbyvalue\n   */\n  orderByValue() {\n    if (this._modifiers.hasOrderBy()) {\n      throw new Error(\n        \"firebase.database().ref().orderByValue() You can't combine multiple orderBy calls.\",\n      );\n    }\n\n    const modifiers = this._modifiers._copy().orderByValue();\n    modifiers.validateModifiers('firebase.database().ref().orderByValue()');\n\n    return new DatabaseQuery(this._database, this.path, modifiers);\n  }\n\n  startAt(value, key) {\n    if (!isNumber(value) && !isString(value) && !isBoolean(value) && !isNull(value)) {\n      throw new Error(\n        \"firebase.database().ref().startAt(*) 'value' must be a number, string, boolean or null value.\",\n      );\n    }\n\n    if (!isUndefined(key) && !isString(key)) {\n      throw new Error(\n        \"firebase.database().ref().startAt(_, *) 'key' must be a string value if defined.\",\n      );\n    }\n\n    if (this._modifiers.hasStartAt()) {\n      throw new Error(\n        'firebase.database().ref().startAt() Starting point was already set (by another call to startAt or equalTo).',\n      );\n    }\n\n    const modifiers = this._modifiers._copy().startAt(value, key);\n    modifiers.validateModifiers('firebase.database().ref().startAt()');\n\n    return new DatabaseQuery(this._database, this.path, modifiers);\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n\n  toString() {\n    return `${this._database._customUrlOrRegion}${pathToUrlEncodedString(this.path)}`;\n  }\n\n  keepSynced(bool) {\n    if (!isBoolean(bool)) {\n      throw new Error(\n        \"firebase.database().ref().keepSynced(*) 'bool' value must be a boolean value.\",\n      );\n    }\n\n    return this._database.native.keepSynced(\n      this._generateQueryKey(),\n      this.path,\n      this._modifiers.toArray(),\n      bool,\n    );\n  }\n\n  // Generates a unique string for a query\n  // Ensures any queries called in various orders keep the same key\n  _generateQueryKey() {\n    return `$${this._database._customUrlOrRegion}$/${this.path}$${\n      this._database.app.name\n    }$${this._modifiers.toString()}`;\n  }\n\n  // Generates a unique event registration key\n  _generateQueryEventKey(eventType) {\n    return `${this._generateQueryKey()}$${listeners}$${eventType}`;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}